{"version":3,"file":"static/js/269.dc819b82.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MoviesSearch/Movies.module.css?6282","components/MoviesSearch/Movies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchLabel\":\"Movies_searchLabel__Wbrq7\",\"btnSearch\":\"Movies_btnSearch__LxZaL\",\"containerPosters\":\"Movies_containerPosters__zcZzP\",\"posterItem\":\"Movies_posterItem__IjeAh\",\"posterImage\":\"Movies_posterImage__MCEbM\",\"posterLink\":\"Movies_posterLink__-6GKJ\",\"labelSearch\":\"Movies_labelSearch__VxEG2\"};","import React, { useEffect, useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport styles from './Movies.module.css';\n\nconst Movies = () => {\n  const [localSearchResults, setLocalSearchResults] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const queryParam = searchParams.get('query');\n    setSearchQuery(queryParam || '');\n    if (queryParam) {\n      fetchMovies(queryParam);\n    } else {\n      setLocalSearchResults([]);\n    }\n  }, [searchParams]);\n\n  const fetchMovies = async query => {\n    try {\n      const response = await axios.get(\n        `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=a067f81bd7a94c3876fea33a53d4c87a`\n      );\n      setLocalSearchResults(response.data.results);\n    } catch (error) {\n      console.error('Error searching movies:', error);\n    }\n  };\n\n  const handleSearch = async () => {\n    if (searchQuery) {\n      setSearchParams({ query: searchQuery });\n      fetchMovies(searchQuery);\n    }\n  };\n\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  return (\n    <div className={styles.containerSearch}>\n      <h2 className={styles.searchTitle}>Search Movies</h2>\n      <div className={styles.searchLabel}>\n        <input\n          type=\"text\"\n          value={searchQuery}\n          onChange={e => setSearchQuery(e.target.value)}\n          onKeyPress={handleKeyPress}\n          className={styles.labelSearch}\n        />\n        <button onClick={handleSearch} className={styles.btnSearch}>\n          Search\n        </button>\n      </div>\n      <ul className={styles.containerPosters}>\n        {localSearchResults.map(movie => (\n          <li key={movie.id} className={styles.posterItem}>\n            <Link to={`/movies/${movie.id}`} className={styles.posterLink}>\n              {movie.poster_path ? (\n                <img\n                  className={styles.posterImage}\n                  src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n                  alt={movie.title}\n                />\n              ) : (\n                <span className={styles.noPoster}>No poster</span>\n              )}\n              <span className={styles.posterTitle}>{movie.title}</span>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nMovies.propTypes = {\n  query: PropTypes.string,\n  searchResults: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default Movies;\n"],"names":["_useState","useState","_useState2","_slicedToArray","localSearchResults","setLocalSearchResults","_useState3","_useState4","searchQuery","setSearchQuery","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","useEffect","queryParam","get","fetchMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","query","response","_context","prev","next","axios","concat","sent","data","results","t0","console","error","stop","_x","apply","arguments","handleSearch","_ref2","_callee2","_context2","_jsxs","className","styles","children","_jsx","type","value","onChange","e","target","onKeyPress","event","key","onClick","map","movie","Link","to","id","poster_path","src","alt","title"],"sourceRoot":""}